{"version":3,"sources":["components/card.jsx","components/card-list.jsx","components/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","monster","id","name","email","Component","CardList","state","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","searchField","event","setState","target","value","fetch","method","then","response","json","res","catch","error","console","log","filteredMonsters","filter","toLocaleLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6UAqBeA,G,yLAhBX,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BC,KAAKC,MAAMC,QAAQC,GAA7C,+BAEL,4BACGH,KAAKC,MAAMC,QAAQE,KACpB,8BAEF,gCAAMJ,KAAKC,MAAMC,QAAQG,Y,GAZdC,cCcJC,E,4MAZbC,MAAQ,G,uDAEN,OACE,yBAAKX,UAAU,aACZG,KAAKC,MAAMQ,SAASC,KAAI,SAACR,GAAD,OACvB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,Y,GANnBI,aCDVM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BACEjB,UAAU,SACVkB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCCG,E,4MApCbT,MAAQ,CACNC,SAAU,GACVS,YAAa,I,EAYfJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAME,OAAOC,S,kEAVvB,IAAD,OAClBC,MAAM,6CAA8C,CAClDC,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAS,EAAKR,SAAS,CAAEX,SAAUmB,OACxCC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,+BAOxB,IAAD,EAC2B9B,KAAKQ,MAA/BC,EADD,EACCA,SAAUS,EADX,EACWA,YACZe,EAAmBxB,EAASyB,QAAO,SAAChC,GAAD,OACvCA,EAAQE,KAAK+B,oBAAoBC,SAASlB,EAAYiB,wBAExD,OACE,yBAAKtC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEgB,YAAY,kBACZC,aAAcd,KAAKc,eAErB,kBAAC,EAAD,CAAUL,SAAUwB,S,GA/BV3B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.5c399bfe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./card-styles.css\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <img\r\n          alt=\"monster\"\r\n          src={`https://robohash.org/${this.props.monster.id}?set=set5?size=180Ã—180`}\r\n        />\r\n        <h2>\r\n          {this.props.monster.name}\r\n          <br />\r\n        </h2>\r\n        <h3> {this.props.monster.email}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport \"./card-list-styles.css\";\r\nimport Card from \"./card\";\r\n\r\nclass CardList extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"card-list\">\r\n        {this.props.monsters.map((monster) => (\r\n          <Card key={monster.id} monster={monster} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./search-box.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list\";\nimport { SearchBox } from \"./components/search-box\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\",\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\", {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((res) => this.setState({ monsters: res }))\n      .catch((error) => console.log(error));\n  }\n\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}